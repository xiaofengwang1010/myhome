#########################################################
## basic
#########################################################
export PATH=$HOME/bin:/usr/local/git/bin:/usr/local/mysql/bin:/usr/local/bin:$HOME/opt/radrails:$HOME/opt/nginx/sbin:$HOME/opt/eclipse:$PATH
export NODE_PATH=/usr/local/lib/jsctags/:$NODE_PATH
export LS_COLORS='di=01;33'

# Reset
Bash_Color_Off='\[\e[0m\]'       # Text Reset

# Regular Colors
Bash_Black='\[\e[0;30m\]'        # Black
Bash_Red='\[\e[0;31m\]'          # Red
Bash_Green='\[\e[0;32m\]'        # Green
Bash_Yellow='\[\e[0;33m\]'       # Yellow
Bash_Blue='\[\e[0;34m\]'         # Blue
Bash_Purple='\[\e[0;35m\]'       # Purple
Bash_Cyan='\[\e[0;36m\]'         # Cyan
Bash_White='\[\e[0;37m\]'        # White

# Bold
Bash_BBlack='\[\e[1;30m\]'       # Black
Bash_BRed='\[\e[1;31m\]'         # Red
Bash_BGreen='\[\e[1;32m\]'       # Green
Bash_BYellow='\[\e[1;33m\]'      # Yellow
Bash_BBlue='\[\e[1;34m\]'        # Blue
Bash_BPurple='\[\e[1;35m\]'      # Purple
Bash_BCyan='\[\e[1;36m\]'        # Cyan
Bash_BWhite='\[\e[1;37m\]'       # White

# Underline
Bash_UBlack='\[\e[4;30m\]'       # Black
Bash_URed='\[\e[4;31m\]'         # Red
Bash_UGreen='\[\e[4;32m\]'       # Green
Bash_UYellow='\[\e[4;33m\]'      # Yellow
Bash_UBlue='\[\e[4;34m\]'        # Blue
Bash_UPurple='\[\e[4;35m\]'      # Purple
Bash_UCyan='\[\e[4;36m\]'        # Cyan
Bash_UWhite='\[\e[4;37m\]'       # White

# Background
Bash_On_Black='\[\e[40m\]'       # Black
Bash_On_Red='\[\e[41m\]'         # Red
Bash_On_Green='\[\e[42m\]'       # Green
Bash_On_Yellow='\[\e[43m\]'      # Yellow
Bash_On_Blue='\[\e[44m\]'        # Blue
Bash_On_Purple='\[\e[45m\]'      # Purple
Bash_On_Cyan='\[\e[46m\]'        # Cyan
Bash_On_White='\[\e[47m\]'       # White

# High Intensty
Bash_IBlack='\[\e[0;90m\]'       # Black
Bash_IRed='\[\e[0;91m\]'         # Red
Bash_IGreen='\[\e[0;92m\]'       # Green
Bash_IYellow='\[\e[0;93m\]'      # Yellow
Bash_IBlue='\[\e[0;94m\]'        # Blue
Bash_IPurple='\[\e[0;95m\]'      # Purple
Bash_ICyan='\[\e[0;96m\]'        # Cyan
Bash_IWhite='\[\e[0;97m\]'       # White

# Bold High Intensty
Bash_BIBlack='\[\e[1;90m\]'      # Black
Bash_BIRed='\[\e[1;91m\]'        # Red
Bash_BIGreen='\[\e[1;92m\]'      # Green
Bash_BIYellow='\[\e[1;93m\]'     # Yellow
Bash_BIBlue='\[\e[1;94m\]'       # Blue
Bash_BIPurple='\[\e[1;95m\]'     # Purple
Bash_BICyan='\[\e[1;96m\]'       # Cyan
Bash_BIWhite='\[\e[1;97m\]'      # White

# High Intensty backgrounds
Bash_On_IBlack='\[\e[0;100m\]'   # Black
Bash_On_IRed='\[\e[0;101m\]'     # Red
Bash_On_IGreen='\[\e[0;102m\]'   # Green
Bash_On_IYellow='\[\e[0;103m\]'  # Yellow
Bash_On_IBlue='\[\e[0;104m\]'    # Blue
Bash_On_IPurple='\[\e[10;95m\]'  # Purple
Bash_On_ICyan='\[\e[0;106m\]'    # Cyan
Bash_On_IWhite='\[\e[0;107m\]'   # White

BASH_NEWLINE="\n"

[ -f ~/.bashrc_git ] && . ~/.bashrc_git

export PS1="\n\
${Bash_Green}\d \t \u${Bash_Color_Off}\n\
\w\n\
${Bash_Cyan}\$(__git_ps1)${Bash_Color_Off} \
${Bash_Yellow}[\$(~/.rvm/bin/rvm-prompt)]${Bash_Color_Off}\n\
\$ "

export EDITOR=/usr/bin/vim
export VISUAL=/usr/bin/vim
export SHOWOFF_EVAL_RUBY=1

export LESS="-X"

function cdl { cd ${1-$HOME}; ls -lFG;}

# edit my bashrc and(or) reload it
edit_bashrc()
{
    vim "$HOME/.bashrc_xfun68"
    return $?
}

source_bashrc()
{
    sys_bashrc_file="$HOME/.bashrc"
    echo "source $sys_bashrc_file ..."
    source "$sys_bashrc_file"
    result=$?
    echo "done"
    return $result
}

mybashrc()
{
    case "$1" in
        "-e" )
            edit_bashrc
            ;;
        "-l" )
            source_bashrc
            ;;
        *    )
            edit_bashrc
            source_bashrc
            ;;
    esac

    return 0
}

myhome()
{
  cd ~/code/myhome
}

# kill a process using the PID from 'cat xxx.pid'
kc()
{
    if [ -n "$2" ] ; then
        kill "$2" `cat ${1:-"cat_not_found_pid_file"}.pid`
    else
        kill `cat ${1:-"cat_not_found_pid_file"}.pid`
    fi
}

# tail last file
tl()
{
    tail -n${2:-100} -f `ls ${1:-*}* | tail -n1`
}

# edit README file and convert it to html and show it in google-chrome
readme()
{
    vi README ; markdown README > README.html && google-chrome README.html
}

daka()
{
    if (($# != 2)); then
        echo "Usage: $0 <passport> <password>";
        return 1;
    fi
    passport=${1};
    password=${2};
    ssh 89 "curl 'http://192.168.41.191/apl/login/Login.wa?do=login' -d '_environment=&passport=${passport}&password=${password}&login_type=N'"
    retcode=$?;
    date >> ~/.daka-robot.log
    echo "Daka for $passport/$password, result is '$retcode'." >> ~/.daka-robot.log
    echo "" >> ~/.daka-robot.log
    return $retcode;
}

random_num_between()
{
    min=${1:-0}
    max=${2:-100}
    diff=$max-$min+1
    random_num=$(date +%s%N)
    ((retnum=random_num%diff+min))
    echo $retnum
}

cgrep()
{
    GREP_COLOR="1;3$((RANDOM%6+1))" grep --color=always "$@"
}

calc ()
{
  bc -l <<< "$@"
}

d2b()
{
    echo "obase=2; ibase=10; `echo $@ | tr a-z A-Z`" | bc
}
d2o()
{
    echo "obase=8; ibase=10; `echo $@ | tr a-z A-Z`" | bc
}
d2h()
{
    echo "obase=16; ibase=10; `echo $@ | tr a-z A-Z`" | bc
}

b2d()
{
    echo "obase=10; ibase=2; `echo $@ | tr a-z A-Z`" | bc
}

o2d()
{
    echo "obase=10; ibase=8; `echo $@ | tr a-z A-Z`" | bc
}

h2d()
{
    echo "obase=10; ibase=16; `echo $@ | tr a-z A-Z`" | bc
}

#########################################################
## history
#########################################################
[[ -s "$HOME/.bashrc_history" ]] && source "$HOME/.bashrc_history"

top-ten()
{
  history | awk '{CMD[$4]++;count++;} END { for(a in CMD) {print CMD[a] " " CMD[a]/count*100 "% " a}}' | grep -v "./" | column -c3 -s ' ' -t | sort -nr | nl |  head -n ${1:-10}
}

#########################################################
## ssh
#########################################################
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo "Initializing new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
# if [ -f "${SSH_ENV}" ]; then
#    . "${SSH_ENV}" > /dev/null
#     #ps ${SSH_AGENT_PID} doesn't work under cywgin
#     ps -uax | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#     start_agent;
#     }
# else
#     start_agent;
# fi

#########################################################
## ibus
#########################################################
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus

#########################################################
## SVN
#########################################################
export SVN_EDITOR=vim

svnurl()
{
    SVNURL=$(svn info | grep "URL:\s*svn" | cut -d " " -f 2)
    echo $SVNURL
}

sdl()
{
	case "$TERM" in
		msys)
		CONTEXT_COLOR=""
		ADD_COLOR=""
		DELETE_COLOR=""
		LOCATION_COLOR=""
		INDEX_COLOR=""
		NORM_COLOR=""
		;;
	*)
		CONTEXT_COLOR=`tput setaf 7`
		ADD_COLOR=`tput setaf 2`
		DELETE_COLOR=`tput setaf 1`
		LOCATION_COLOR=`tput setaf 6`
		FILE_COLOR=`tput setaf 3`
		INDEX_COLOR=`tput setaf 5`
		NORM_COLOR=`tput sgr0`
		;;
	esac

		svn diff $* |
		sed -e "s/^+[^+].*/${ADD_COLOR}&${NORM_COLOR}/g" \
		-e "s/^-[^-].*/${DELETE_COLOR}&${NORM_COLOR}/g" \
		-e "s/^[-+]\{3\}.*/${FILE_COLOR}&${FILE_COLOR}/g" \
		-e "s/^@@.*/${LOCATION_COLOR}&${NORM_COLOR}/g" \
		-e "s/^[iI]ndex.*/${INDEX_COLOR}&${NORM_COLOR}/g" \
		-e "s/.*/${CONTEXT_COLOR}&${NORM_COLOR}/g" \
		-e "s/\r//g" |
		${PAGER:-less -QRS}
}

#########################################################
## Graphviz
#########################################################
dot2svg()
{
    if [[ -z "$1" ]]; then
        return 1;
    fi

    filename=$1; dot -Tsvg "$filename" -O && open "$filename.svg"
}

dot2png()
{
    if [[ -z "$1" ]]; then
        return 1;
    fi

    filename=$1; dot -Tpng "$filename" -O && open "$filename.png"
}

neato2png()
{
    if [[ -z "$1" ]]; then
        return 1;
    fi

    filename=$1; neato -Tpng "$filename" -O
}

fdp2svg()
{
    if [[ -z "$1" ]]; then
        return 1;
    fi

    filename=$1; fdp -Tsvg "$filename" -O && open "$filename.svg"
}

#########################################################
## Ruby
#########################################################
# export RUBYOPT=rubygems
export RUBYOPT="-Ku"

rvmrc()
{
  echo 'rvm_install_on_use_flag=1' > .rvmrc
  echo "rvm --create use ruby-1.9.3-p327@${1:-`basename $(pwd)`}" >> .rvmrc
  cat .rvmrc 1>&2
  recd
}

gemfile()
{
  echo 'source :rubygems' > Gemfile
  echo >> Gemfile
  cat 1>&2 <<-EOF
Hints:
  -= Gem Sources =-
  source 'http://ruby.taobao.org/'
  source :rubygems
  source "http://rubygems.org"
  source :rubyforge
  source "http://gems.rubyforge.org"
  source :gemcutter
  source "http://gemcutter.org"

  -= Version Specifiers =-
  gem "nokogiri"
  gem "rails", "3.0.0.beta3"
  gem "rack",  ">=1.0"
  gem "thin",  "~>1.1"
  gem "chef",  "~> 2.2.beta"

  -= Bundler.require =-
  gem "rspec", :require => "spec"
  gem "sqlite3-ruby", "1.2.5", :require => "sqlite3"

  -= Git Repo =-
  gem "nokogiri", :git => "git://github.com/tenderlove/nokogiri.git", :branch => "1.4"

  git "git://github.com/wycats/thor.git", :tag => "v0.13.4"
  gem "thor"

  -= Local Path =-
  gem "nokogiri", :path => "~/sw/gems/nokogiri"

  -= Groups =-
  gem "wirble", :group => :development
  gem "ruby-debug", :group => [:development, :test]

  group :test do
    gem "rspec"
  end

Now waiting for your input...
--------------------------------------------------------------------------------
EOF
  cat >> Gemfile
  echo "--------------------------------------------------------------------------------" 1>&2
  cat Gemfile 1>&2
}

#########################################################
## Homebrew autocompletion
#########################################################

HOMEBREW_COMPLETION_FILE="`brew --prefix`/etc/bash_completion"
[ -f ${HOMEBREW_COMPLETION_FILE} ] && . ${HOMEBREW_COMPLETION_FILE}

#########################################################
## preview - Call program preview from command line
#########################################################
preview() {
  if [ -z "$*" ]; then
    echo "Usage: $0 [FILE(S)]" 1>&2
    return 1
  fi

  PWD=${PWD//\//:}

  for file in $*;
  do
    if [ -n "$FILES" ]
    then
      FILES="$FILES, \"$PWD:$file\""
    else
      FILES="\"$PWD:$file\""
    fi
  done;

  osascript <<EOF
  tell application "Preview"
    activate
    open {$FILES}
  end tell
EOF
}

#########################################################
## Display disk usage under specific folders
#########################################################

folder-size()
{
  local root_folder="${1:-.}"
  local max_depth="${2:-1}"

  find "${root_folder}" -type d -maxdepth ${max_depth} -mindepth 1 -exec sudo du -sh -m {} \;
}

#########################################################
## ABS
#########################################################

abs()
{
  open 'http://tldp.org/LDP/abs/html/'
}

#########################################################
## Customized tools
#########################################################

dict()
{
  open "http://dict.cn/${*}"
}

#########################################################
## Customized system command extensions
#########################################################

open() {
  PORT=$(echo "$1" | egrep "^[0-9]{4,}$")
  URL=$(echo "$1" | grep -v 'http' | egrep "(.*\.com.*)|(^localhost:.*)")

  if [[ -n "${PORT}" ]]
  then
    /usr/bin/open "http://localhost:${PORT}/"
  elif [[ -n "${URL}" ]]
  then
    /usr/bin/open "http://$URL/"
  else
    /usr/bin/open "${1}"
  fi
}

connect_vpn() {
  vpn_name=${1:-non_existed_vpn}

  osascript -e "
    tell application \"System Events\"
        tell current location of network preferences
            set VPNservice to service \"$vpn_name\"
            set isConnected to connected of current configuration of VPNservice
            if not isConnected then
                connect VPNservice
            end if
        end tell
    end tell
  "
}

disconnect_vpn() {
  vpn_name=${1:-non_existed_vpn}

  osascript -e "
    tell application \"System Events\"
        tell current location of network preferences
            set VPNservice to service \"$vpn_name\"
            set isConnected to connected of current configuration of VPNservice
            if isConnected then
                disconnect VPNservice
            end if
        end tell
    end tell
  "
}

#########################################################
## Autojump
#########################################################

[[ -f `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh

#########################################################
## Current Time String
#########################################################

current_time_string() {
  date "+%Y-%m-%d_%H:%M:%S"
}


vi() {
  log_file="$HOME/tmp/vim_startup_time_$(current_time_string).log"
  mvim --startuptime "${log_file}" "$@"
}

#########################################################
## rvm, should be always at the end of this file
#########################################################
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
[[ -r $rvm_path/scripts/completion ]] && source "$rvm_path/scripts/completion"

